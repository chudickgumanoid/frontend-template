{
  "field input": {
    "prefix": "f-input",
    "body": [
      " <n-form-item label=\"${2:example}\" :path=\"`${1:}`\">",
      "          <n-input",
      "            v-model:value=\"formValue.${1:}\"",
      "            placeholder=\"${2:example}\"",
      "          />",
      " </n-form-item>",
    ],
    "description": "field input",
  },
  "field enums": {
    "prefix": "f-enums",
    "body": [
      "<n-form-item",
      "            label=\"${2:}\"",
      "            :path=\"`${1:}`\"",
      "          >",
      "            <m-select-enums",
      "              nickname=\"${3:}\"",
      "              v-model:value=\"formValue.${1:}\"",
      "              placeholder=\"${2:}\"",
      "            />",
      "    </n-form-item>",
    ],
    "description": "field enums",
  },
  "field query": {
    "prefix": "f-query",
    "body": [
      "import { useQuery, useMutation, useQueryClient } from '@tanstack/vue-query';",
      "",
      "const selectFn = {",
      "  func: (data) => {",
      "    return {",
      "      field1: data,",
      "      field2: data,",
      "    };",
      "  },",
      "  all: (data) => data,",
      "};",
      "",
      "export const ${TM_FILENAME_BASE} = (selectDataKey = 'all') => {",
      "  return useQuery({",
      "    queryKey: ['${1:queryKey}'],",
      "    queryFn: () => {},",
      "    select(data) {",
      "      return selectFn[selectDataKey](data);",
      "    },",
      "  });",
      "};",
      "",
      "export const ${TM_FILENAME_BASE}Mutate = (params) => {",
      "const queryClient = useQueryClient();",
      "  return useMutation({",
      "    mutationFn: (data) => {},",
      "    onSuccess: () => {",
      "      queryClient.invalidateQueries(['${2:queryKey}']);",
      "    }",
      "  });",
      "};",
    ],
    "description": "field query tanstack",
  },

  "Vue Naive UI DataTable": {
    "prefix": "f-table",
    "body": [
      "<template>",
      "  <n-data-table",
      "    :columns=\"columns\"",
      "    :data=\"data\"",
      "  />",
      "</template>",
      "",
      "<script setup>",
      "import { ref } from 'vue';",
      "import { useRoute, useRouter } from 'vue-router';",
      "",
      "// Mock data",
      "const data = ref([",
      "  {",
      "    key: 1,",
      "    thing: { title: 'Product 1' },",
      "    sale_price: 1000,",
      "    balance_quantity: 5,",
      "    max_balance_quantity: 10,",
      "  },",
      "  {",
      "    key: 2,",
      "    thing: { title: 'Product 2' },",
      "    sale_price: 2000,",
      "    balance_quantity: 3,",
      "    max_balance_quantity: 5,",
      "  },",
      "  {",
      "    key: 3,",
      "    thing: { title: 'Product 3' },",
      "    sale_price: 1500,",
      "    balance_quantity: 7,",
      "    max_balance_quantity: 7,",
      "  },",
      "]);",
      "",
      "const columns = [",
      "  {",
      "    title: 'Товар',",
      "    key: 'thing.title',",
      "  },",
      "  {",
      "    title: 'Цена (₸)',",
      "    key: 'sale_price',",
      "    render: (row) => `${row.sale_price} ₸`,",
      "  },",
      "  {",
      "    title: 'Количество',",
      "    key: 'quantity',",
      "    width: '20%',",
      "    render: (row) => row.balance_quantity,",
      "  },",
      "  {",
      "    title: 'Сумма (₸)',",
      "    key: 'sum',",
      "    render: (row) => `${row.sale_price * row.balance_quantity}`,",
      "  },",
      "];",
      "</script>",
      "",
      "<style scoped>",
      "</style>",
    ],
    "description": "A Vue component with Naive UI DataTable setup",
  },

  "Create a store with file name": {
    "prefix": "f-store",
    "body": [
      "import { defineStore } from 'pinia';",
      "export const use${TM_FILENAME_BASE/(.*)/${1:/capitalize}/} = defineStore(\"${TM_FILENAME_BASE}\", () => {",
      "  return {",
      "    $1",
      "  }",
      "});",
    ],
    "description": "Create a store based on the file name",
  },

  "Vue View Component Template": {
    "prefix": "f-view",
    "body": [
      "<template>",
      "  <m-h1>${TM_FILENAME_BASE}</m-h1>",
      "  <m-card",
      "    class=\"flex justify-between items-center mb-6\"",
      "    size=\"small\"",
      "  >",

      "    <div>",
      "      <n-input",
      "        v-model:value=\"search_value\"",
      "        class=\"w-fit\"",
      "        size=\"large\"",
      "        placeholder=\"Поиск...\"",
      "      />",
      "    </div>",
      "  </m-card>",
      "  <AsyncProvider :asyncComponent=\"Table${TM_FILENAME_BASE/(.*)View/${1}/}\"></AsyncProvider>",
      "</template>",
      "",
      "<script setup>",
      "// Import your components here",

      "import AsyncProvider from \"@/components/provider/AsyncProvider.vue\";",
      "import Table${TM_FILENAME_BASE/(.*)View/${1}/} from \"../components/Table${TM_FILENAME_BASE/(.*)View/${1}/}.vue\";",
      "import { useRouter, useRoute } from \"vue-router\";",
      "import { ref, watch } from \"vue\";",
      "import { useDebounce } from \"@vueuse/core\";",
      "const route = useRoute();",
      "const search_value = ref(\"\");",
      "const debounced = useDebounce(search_value, 600);",
      "const router = useRouter();",
      "watch(",
      "  debounced,",
      "  () => {",
      "    if (debounced.value) {",
      "      router.push({ path: route.path, query: { search: debounced.value } });",
      "    } else {",
      "      router.push({ path: route.path });",
      "    }",
      "  },",
      "  {",
      "    immediate: false,",
      "  }",
      ");",
      "</script>",
      "",
      "<style lang=\"css\" scoped></style>",
    ],
    "description": "Vue component template with dynamic heading and async component name.",
  },
}
